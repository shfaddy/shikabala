gaBeep [] init nchnls

instr $beep, beep

#include "kit/ornaments.orc"

iAttack init p3 / 2^4
iDecay init p3 / 2^4

iSustain init 0

aAmplitude linseg 0, iAttack, 1, iDecay, iSustain

iFrequency init 2^( p5 + ( ( giKey + p4 ) / 16 ) )

aFrequency linsegr iFrequency * 2^(4/16), iAttack / 2^3, iFrequency, iDecay / 2, iFrequency * 2^(-4/16)

aClip rspline 0, 1, 0, giMeasure

aSkew rspline -1, 1, 0, giMeasure

aNote squinewave aFrequency, aClip, aSkew

aNote *= aAmplitude / 2

aAmplitude linseg 0, iAttack, 1, p3 - iAttack, iSustain

aPluck pluck k ( aAmplitude ), k ( aFrequency ) / 2^0, iFrequency, 0, 1

aNote += aPluck / 2

aNote butterlp aNote, aFrequency * 2^2

aNote butterhp aNote, aFrequency / 2^2

gaBeep [ p7 ] = gaBeep [ p7 ] + aNote / 2^p6

endin

instr _beep

aBeepLeft = gaBeep [ 0 ]
aBeepRight = gaBeep [ 1 ]

denorm aBeepLeft
denorm aBeepRight

seed 0

kRoom rspline 1/4, 1, 1 / giMeasure, giMeasure
kDamp rspline 0, 1, 1 / giMeasure, giMeasure

aReverbLeft, aReverbRight freeverb aBeepLeft, aBeepRight, kRoom, kDamp

kReverb rspline 2^0, 2^2, 1 / giMeasure, giMeasure

aLeft = aBeepLeft + aReverbLeft / kReverb
aRight = aBeepRight + aReverbRight / kReverb

aLeft clip aLeft, 1, 0dbfs
aRight clip aRight, 1, 0dbfs

gaNote [ 0 ] = gaNote [ 0 ] + aLeft
gaNote [ 1 ] = gaNote [ 1 ] + aRight

gaBeep [ 0 ] = 0
gaBeep [ 1 ] = 0

endin

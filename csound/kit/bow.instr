gaBow [] init nchnls

instr $bow, bow

#include "kit/ornaments.orc"

aNote = 0

if p3 > giMeasure / 2^3 then

iEnvelope init giMeasure / 2^3

else

iEnvelope init p3

endif

iAttack init iEnvelope / 2^1
iDecay init iEnvelope / 2^3
iRelease init p3 - iAttack - iDecay

iSustain init 1

iFrequency init 2^( p5 + ( ( giKey + p4 ) / 16 ) )

kAmplitude adsr iAttack, iDecay, iSustain, iRelease

iAmplitude init .99
iAmplitudeError init .01
kAmplitudeError rspline iAmplitude - iAmplitudeError, iAmplitude + iAmplitudeError, 0, p3

iAttack init iAttack / 2^13
iDecay init p3 - iAttack - iEnvelope / 2^9
iRelease init p3 - iAttack - iDecay

kFrequency linseg iFrequency * 2^20, iAttack, iFrequency, iDecay, iFrequency * 2^( 1/2^10 ), iRelease, iFrequency * 2^( 1/2^8 )

iDetune init 1/2^7

kDetune rspline 2^( -iDetune/16 ), 2^( iDetune/16 ), 0, p3

kFrequency *= kDetune

iPressure init 5
iPressureError init .01
; 1 - 5
kPressure rspline iPressure - iPressureError, iPressure + iPressureError, 0, p3

iPosition init .18
iPositionError init .01
; .025 - .23
kPosition rspline iPosition - iPositionError, iPosition + iPositionError, 0, p3

iVibratoFrequency init .025
iVibratoFrequencyError init .0001
; 0 - 12
kVibratoFrequency rspline iVibratoFrequency - iVibratoFrequencyError, iVibratoFrequency + iVibratoFrequencyError, 0, p3

iVibratoAmplitude init .025
iVibratoAmplitudeError init .01
kVibratoAmplitude rspline iVibratoAmplitude - iVibratoAmplitudeError, iVibratoAmplitude + iVibratoAmplitudeError, 0, p3

aBody wgbow kAmplitude, iFrequency, kPressure, kPosition, kVibratoFrequency, kVibratoAmplitude

aNote += aBody

aZz vco2 kAmplitude, kFrequency, 6

aZz butterlp aZz, kFrequency * 2^0

kFilter linseg 2^13, iAttack, 2^0

aZz butterhp aZz, kFrequency * kFilter / 2^1

aNote += aZz

gaBow [ p7 ] = gaBow [ p7 ] + aNote / 2^p6

endin

instr _bow

aBowLeft = gaBow [ 0 ]
aBowRight = gaBow [ 1 ]

denorm aBowLeft
denorm aBowRight

seed 0

kRoom rspline 0, 1, 1 / giMeasure, giMeasure
kDamp rspline 0, 1, 1 / giMeasure, giMeasure

aReverbLeft, aReverbRight freeverb aBowLeft, aBowRight, kRoom, kDamp

kReverb rspline 1, 2^2, 1 / giMeasure, giMeasure

aLeft = aBowLeft + aReverbLeft / kReverb
aRight = aBowRight + aReverbRight / kReverb

gaNote [ 0 ] = gaNote [ 0 ] + aLeft
gaNote [ 1 ] = gaNote [ 1 ] + aRight

gaBow [ 0 ] = 0
gaBow [ 1 ] = 0

endin
